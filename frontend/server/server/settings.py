"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 2.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import json
import logging
import os

from django.utils.translation import gettext_lazy as _


# Helper functions
def get_bool_env(key: str, default: bool) -> bool:
    value = os.environ.get(key)

    if value is None:
        return default

    if value.lower() in ["true", "1", "yes"]:
        return True

    return False


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Load environment settings
CONFIG_FILE_NAME = os.path.join(BASE_DIR, "config.json")
try:
    with open(CONFIG_FILE_NAME, "r") as config_file:
        CONFIG = json.load(config_file)

except FileNotFoundError:
    import warnings

    warnings.warn("config.json not found, using config-devel.json")
    CONFIG_FILE_NAME = os.path.join(BASE_DIR, "config-devel.json")
    with open(CONFIG_FILE_NAME, "r") as config_file:
        CONFIG = json.load(config_file)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = CONFIG["secret_key"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_bool_env("DEBUG", CONFIG["debug"])

ALLOWED_HOSTS = CONFIG["allowed_hosts"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "inference",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

ROOT_URLCONF = "server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "server.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {}  # type: ignore


X_FRAME_OPTIONS = "DENY"
SECURE_CONTENT_TYPE_NOSNIFF = True

CSRF_COOKIE_SAMESITE = "Strict"
SESSION_COOKIE_NAME = "sessionid"
SESSION_COOKIE_SAMESITE = "Strict"
SESSION_COOKIE_HTTPONLY = True


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

LANGUAGES = [
    ("en", _("English")),
    ("he", _("Hebrew")),
]

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = "assets"


# Logging configuration (taken from the main project)
# https://docs.python.org/3/library/logging.config.html
LOG_LEVEL = logging.INFO

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{asctime}.{msecs:03.0f} {levelname} {filename}:{lineno:<4d}] {message}",
            "style": "{",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
        "simple": {"format": "[{asctime} {levelname}] {message}", "style": "{"},
    },
    "handlers": {"console": {"class": "logging.StreamHandler", "level": LOG_LEVEL, "formatter": "verbose"}},
    "loggers": {},
    "root": {"handlers": ["console"], "level": LOG_LEVEL, "propagate": True},
}

CSRF_COOKIE_SAMESITE = "Strict"
SESSION_COOKIE_NAME = "sessionid"
SESSION_COOKIE_SAMESITE = "Strict"
SESSION_COOKIE_HTTPONLY = True
if DEBUG is True:
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False

else:
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True


#
# CORS
#
CORS_ORIGIN_WHITELIST = [CONFIG["frontend_host"]]


#
# REST Framework
#
REST_FRAMEWORK = {
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.NamespaceVersioning",
    "DEFAULT_VERSION": "v1",
    "VERSION_PARAM": "version",
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.AllowAny"],
    "DEFAULT_AUTHENTICATION_CLASSES": [],
    "DEFAULT_FILTER_BACKENDS": [],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
}


#
# Birder
#
MMS_HOST = os.environ.get("MMS_HOST", CONFIG["mms_host"])
MMS_MANAGEMENT_HOST = f"{MMS_HOST}:8081"
MMS_PREDICT_URL = f"{MMS_HOST}:8080/predictions"
